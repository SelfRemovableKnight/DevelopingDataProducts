anova(withwt,withinteraction)
lrtest(withwt,withinteraction)
withwt2 <- lm(mpg ~ I(wt*.5) + as.factor(cyl), data=mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(x,y)
xo <- x[1:4]
yo <- y[1:4]
fit <- lm(x ~ y)
fito <- lm(xo ~ yo)
hatvalues(fit)
fito <- lm(yo ~ xo)
fito <- lm(y ~ x)
fito <- lm(yo ~ xo)
fit <- lm(y ~ x)
hatvalues(fit)
dfbeta(fit)
summary(fit)
summary(fito)
hatvalues(fit)
dfbeta(fit)
fit <- lm(y ~ x)
y
x
dfbeta(fit)
dfbetas(fit)
?dfbeta
?dfbetas
?hatvalues
library(swirl)
swirl()
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, family="binomial",data=ravenData)
lodds <- predict(mdl,data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
head(hits)
class(hits$date)
as.integer(head(hits$date))
mdl <- glm(visits ~ date, family="poisson",data=hits)
summary(mdl)
exp(confint(mdl,'date'))
which.max(hits$visits)
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(visits ~ date, family=poisson, data=hits, offset=log(visits+1))
mdl2 <- glm(simplystats ~ date, family=poisson, data=hits, offset=log(visits+1))
qpois(.95, mdl2$fitted.values[704])
library(MASS)
?shuttle
shuttle
data(shuttle)
glm(use ~ wind, family="binomial", data=shuttle)
glm(use ~ as.factor(wind), family="binomial", data=shuttle)
exp(-0.03181)
exp(0.03181)
table(shuttle$wind,shuttle$use)
shuttle$wind
72/56*55/73
glm(use ~ as.factor(wind) + magn, family="binomial", data=shuttle)
glm(use ~ as.factor(wind) + as.numeric(magn), family="binomial", data=shuttle)
shuttle$magn
glm(use ~ as.factor(wind) + magn, family="binomial", data=shuttle)
exp(-3.201e-02)
glm(use ~ as.factor(wind) + relevel(magn,out), family="binomial", data=shuttle)
glm(use ~ as.factor(wind) + relevel(magn,"out"), family="binomial", data=shuttle)
glm(use ~ as.factor(wind) + relevel(magn,"Out"), family="binomial", data=shuttle)
exp(-0.03201)
glm(use ~ wind + relevel(magn,"Out"), family="binomial", data=shuttle)
glm(use ~ wind + magn, family="binomial", data=shuttle)
exp(-3.201e-02)
glm(use ~ wind + relevel(magn,"Strong"), family="binomial", data=shuttle)
glm(use ~ wind, family="binomial", data=shuttle)
glm(relevel(use,"noauto") ~ wind, family="binomial", data=shuttle)
data(InsectSprays)
InsectSprays
glm(count ~ as.factor(spray), family="poisson", data=InsectSprays)
exp(-0.05588)
exp(0.05588)
InsectSprays[InsectSprays$spray="A"]
InsectSprays[InsectSprays$spray=="A"]
InsectSprays[InsectSprays$spray=="A",]
mean(log(InsectSprays[InsectSprays$spray=="A",]))
mean(log(InsectSprays[InsectSprays$spray=="A",]$count))
mean(log(InsectSprays[InsectSprays$spray=="B",]$count))
exp(2.62319-2.687618)
mean(ln(InsectSprays[InsectSprays$spray=="B",]$count))
?log
exp(mean(log(InsectSprays[InsectSprays$spray=="A",])))/exp(mean(log(InsectSprays[InsectSprays$spray=="B",])))
exp(mean(log(InsectSprays[InsectSprays$spray=="A",]$count)))/exp(mean(log(InsectSprays[InsectSprays$spray=="B",]$count)))
glm(count ~ x + offset(t), family = poisson)
glm(count ~ x + offset(t), family = poisson, data=InsectSprays)
glm(count ~ as.factor(spray) + offset(t), family = poisson, data=InsectSprays)
glm(count ~ as.factor(spray) + offset(10), family = poisson, data=InsectSprays)
?glm
glm(count ~ as.factor(spray) + offset=1, family = poisson, data=InsectSprays)
glm(count ~ as.factor(spray), offset=1, family = poisson, data=InsectSprays)
glm(count ~ as.factor(spray), offset=rep(1,72), family = poisson, data=InsectSprays)
glm(count ~ as.factor(spray), offset=rep(10,72), family = poisson, data=InsectSprays)
log(10)
glm(count ~ as.factor(spray), offset=rep(1+log(10),72), family = poisson, data=InsectSprays)
1.67415+0.62844
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
xbar <- 0:5
ybar <- c(0.08, 0.93, 2.05, 2.54, 3.87, 4.97) - 0.08
lm(ybar ~ xbar - 1,)
ybar
knots <- 0
splineterms <- sapply(knots, function(knot) (x > knot) * (x - knot))
splineterms
xMat <- cbind(1,x, splineTerms)
xMat <- cbind(1,x, splineterms)
lm(y ~ xMat)
xMat
lm(y ~ x + splineTerms)
lm(y ~ x + splineterms)
split <- lm(y ~ x + splineterms)
split$coef[2]+split$coef[3]
yhat <- predict(split,x)
?predict
yhat <- predict(split)
plot(x,yhat)
plot(x,y)
plot(x,yhat)
yhat[11]/x[11]
(yhat[11]-0.1826)/x[11]
(yhat[11]+0.1826)/x[11]
spraylm <- glm(count ~ as.factor(spray), family="poisson", data=InsectSprays)
predict(spraylm)
mean(log(InsectSprays[InsectSprays$spray=="A",]$count))
mean(log(InsectSprays[InsectSprays$spray=="B",]$count))
mean(log(InsectSprays[InsectSprays$spray=="C",]$count))
mean(log(InsectSprays[InsectSprays$spray=="D",]$count))
mean(log(InsectSprays[InsectSprays$spray=="E",]$count))
mean(log(InsectSprays[InsectSprays$spray=="F",]$count))
spraylm
library(caret)
install.packages("caret")
library(caret)
install.packages("brglm")
library(caret)
?predict
?train
?createTimeSlices
?confusionMatrix
library(caret)
?createFolds
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
adData[,52]
adData[,55:66]
ilData <- adData[,55:66]
ilData <- adData[,58:69]
?preProces
?preProcess
preProcess(ilData,method="pca")
preProcess(ilData,method="pca", thresh=0.8)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ilTraining <- training[,58:69]
ilTesting <- testing[,58:69]
?train
train(ilTraining,training$diagnosis, method="glm")
ilTraining <- training[,c(1,58:69)]
ilTesting <- testing[,c(1,58:69)]
train(ilTraining,ilTraining$diagnosis, method="glm")
train(form=diagnosis ~.,data=ilTraining, method="glm")
train(ilTraining,training$diagnosis,form=diagnosis ~.,data=ilTraining, method="glm")
library(e1071)
install.packages("e1071")
library(e1071)
train(ilTraining,training$diagnosis,form=diagnosis ~.,data=ilTraining, method="glm")
train(ilTraining,ilTraining$diagnosis,form=diagnosis ~.,data=ilTraining, method="glm")
train(x=ilTraining,y=ilTraining$diagnosis,form=diagnosis ~.,data=ilTraining, method="glm")
warnings()
ilTraining <- training[,c(1,58:69)]
ilTesting <- testing[,c(1,58:69)]
train(x=ilTraining,y=ilTraining$diagnosis,form=diagnosis ~ .,data=ilTraining, method="glm")
train(diagnosis ~ .,data=ilTraining, method="glm")
ilTraining
modelfit <- train(diagnosis ~ .,data=ilTraining, method="glm")
?predict
predict(modelfit,ilTesting)
ilTesting$diagnosis
ilTesting$diagnosis == predict(modelfit,ilTesting)
sum(ilTesting$diagnosis == predict(modelfit,ilTesting))/82
modelfitpca <- train(diagnosis ~ .,data=ilTraining, method="glm",preprocess="pca")
?train
modelfitpca <- train(diagnosis ~ .,data=ilTraining, method="glm",preProcess="pca")
?preProcess
sum(ilTesting$diagnosis == predict(modelfitpca,ilTesting))/82
preProcess(ilTrain,method="pca", thresh=0.8)
preProcess(ilTraining,method="pca", thresh=0.8)
preProcess(ilTraining[-diagnosis],method="pca", thresh=0.8)
preProcess(ilTraining[-1],method="pca", thresh=0.8)
preprocresult <- preProcess(ilTraining[-1],method="pca", thresh=0.8)
trainControl(preProcOptions = list(thresh = 0.8))
modelfitpca <- train(diagnosis ~ .,data=ilTraining, method="glm",preProcess="pca")
sum(ilTesting$diagnosis == predict(modelfitpca,ilTesting))/82
trainControl(preProcOptions = list(thresh = 0.3))
modelfitpca <- train(diagnosis ~ .,data=ilTraining, method="glm",preProcess="pca")
sum(ilTesting$diagnosis == predict(modelfitpca,ilTesting))/82
?predict
trainControl(preProcOptions = list(thresh = 0.99))
modelfitpca <- train(diagnosis ~ .,data=ilTraining, method="glm",preProcess="pca")
trainControl(preProcOptions = list(thresh = 0.99))
sum(ilTesting$diagnosis == predict(modelfitpca,ilTesting))/82
modelfitpca99 <- train(diagnosis ~ .,data=ilTraining, method="glm",preProcess="pca")
trainControl(preProcOptions = list(thresh = 0.8))
modelfitpca80 <- train(diagnosis ~ .,data=ilTraining, method="glm",preProcess="pca")
modelfitpca80 <- train(diagnosis ~ .,data=ilTraining, method="glm",preProcess="pca",trControl=trainControl(preProcOptions = list(thresh = 0.8)))
sum(ilTesting$diagnosis == predict(modelfitpca80,ilTesting))/82
preProcess(ilTrain,method="pca", thresh=0.9)
preProcess(ilTraining[-diagnosis],method="pca", thresh=0.9)
preProcess(ilTraining[-1],method="pca", thresh=0.9)
preProcess(ilTraining[-1],method="pca", thresh=0.8)
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
install.packages("ElemStatLearn")
---
library(ElemStatLearn)
title: "Impact of transmission on car's MPG"
library(ElemStatLearn)
library(pgmm)
install.packages("pgmm")
library(pgmm)
install.packages("rpart")
install.packages("rpart")
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
split <- createDataPartition(y=segmentationOriginal$Case)
training <- segmentationOriginal[split,]
testing <- segmentationOriginal[-split,]
set.seed(125)
modFit <- train(Case ~ ., method="rpart",data=training)
split <- createDataPartition(y=segmentationOriginal$Case,list=FALSE)
training <- segmentationOriginal[split,]
testing <- segmentationOriginal[-split,]
set.seed(125)
modFit <- train(Case ~ ., method="rpart",data=training)
modFit
print(modFit$finalModel)
split <- createDataPartition(y=segmentationOriginal$Case,list=FALSE)
training <- segmentationOriginal[split,]
testing <- segmentationOriginal[-split,]
set.seed(125)
modFit <- train(Case ~ ., method="rpart",data=training)
print(modFit$finalModel)
split <- createDataPartition(y=segmentationOriginal$Case)
training <- segmentationOriginal[split,]
split <- createDataPartition(y=segmentationOriginal$Case,list=FALSE)
training <- segmentationOriginal[split,]
testing <- segmentationOriginal[-split,]
set.seed(125)
modFit <- train(Case ~ ., method="rpart",data=training)
print(modFit$finalModel)
modFit
print(modFit$finalModel)
modFit$finalModel
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
split <- createDataPartition(y=segmentationOriginal$Case)
training <- segmentationOriginal[split,]
testing <- segmentationOriginal[-split,]
set.seed(125)
modFit <- train(Case ~ ., method="rpart",data=training)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
split <- createDataPartition(y=segmentationOriginal$Case, list=FALSE)
training <- segmentationOriginal[split,]
testing <- segmentationOriginal[-split,]
set.seed(125)
modFit <- train(Case ~ ., method="rpart",data=training)
modFit$finalModel
?segmentationOriginal
training <- segmentationOriginal[Case="Train"]
set.seed(125)
modFit <- train(Class ~ ., method="rpart",data=training)
training <- segmentationOriginal[Case="Train",]
set.seed(125)
modFit <- train(Class ~ ., method="rpart",data=training)
training <- segmentationOriginal[Case=="Train",]
set.seed(125)
modFit <- train(Class ~ ., method="rpart",data=training)
training <- segmentationOriginal[segmentationOriginal$Case=="Train",]
set.seed(125)
modFit <- train(Class ~ ., method="rpart",data=training)
modFit$finalModel
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
oliveFit <- train(Area ~ ., method="tree",data=training)
?train
oliveFit <- train(olive$Area ~ ., method="rpart",data=olive)
?tree
?predict
predict(oliveFit,newdata)
0.0053*1
0.0053*1 + 0.9947*3
oliveFit <- train(olive$Area ~ ., method="class",data=olive)
?tree
??tree
oliveFit <- train(olive$Area ~ ., method="tree",data=olive)
library(tree)
install.packages("tree")
library(tree)
oliveFit <- train(olive$Area ~ ., method="tree",data=olive)
?tree
oliveTreeFit <- tree(olive$Area ~ ., data=olive)
predict(oliveTreeFit,newdata)
oliveTreeFit <- tree(olive$area ~ ., data=olive)
oliveTreeFit <- tree(olive$Area ~ ., data=olive)
olive$Area <- as.factor(olive$Area)
oliveTreeFit <- tree(olive$Area ~ ., data=olive)
predict(oliveTreeFit,newdata)
newdata = as.data.frame(t(colMeans(olive)))
oliveTreeFit <- tree(olive$Area ~ .)
predict(oliveTreeFit,newdata)
library(pgmm)
library(tree)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
oliveTreeFit <- tree(olive$Area ~ ., data=olive)
predict(oliveTreeFit,newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
?train
set.seed(13234)
glmFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm",family="binomial",data=trainSA)
predict(glmFit,trainSA)
trainprediction <- predict(glmFit,trainSA)
testprediction <- predict(glmFit,testSA)
missClass(trainSA,trainprediction)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA,trainprediction)
missClass(testSA,testprediction)
set.seed(13234)
glmFit <- train(as.factor(chd) ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm",family="binomial",data=trainSA)
missClass(trainSA,trainprediction)
trainprediction <- predict(glmFit,trainSA)
testprediction <- predict(glmFit,testSA)
missClass(trainSA,trainprediction)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
glmFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm",family="binomial",data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
trainprediction <- predict(glmFit,trainSA)
testprediction <- predict(glmFit,testSA)
missClass(trainSA,trainprediction)
missClass(testSA,testprediction)
trainprediction
testprediction
trainSA
trainSA$chd
missClass(trainSA$chd,trainprediction)
missClass(testSA$chd,testprediction)
?varImp
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
bosFit <- train(y ~ ., method="rf",data=vowel.train)
varImp(bosFit)
library(ElemStatLearn)
library(randomForest)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
bosFit <- train(y ~ ., method="rf",data=vowel.train)
varImp(bosFit)
install.packages("gbm")
install.packages("forecast")
install.packages("e1071")
install.packages("lubridate")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
bosFit <- train(y ~ ., method="rf",data=vowel.train)
library(caret)
bosFit <- train(y ~ ., method="rf",data=vowel.train)
boostFit <- train(y ~ ., method="gbm",data=vowel.train)
predict(bosFit,vowel.test)
predict(boostFit,vowel.test)
boostpred <- predict(boostFit,vowel.test)
bospred <- predict(bosFit,vowel.test)
sum(bospred==boostpred)/462
sum(bospred==y)/462
sum(bospred==vowel.test$y)/462
sum(boostpred==vowel.test$y)/462
sum(bospred==y & boostpred == y) / sum(bospred==boostpred)
sum(bospred==vowel.test$y & boostpred == vowel.test$y) / sum(bospred==boostpred)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
bosFit <- train(adData$diagnosis ~ ., method="rf",data=training)
boostFit <- train(adData$diagnosis ~ ., method="gbm",data=training)
set.seed(62433)
bosFit <- train(diagnosis ~ ., method="rf",data=training)
boostFit <- train(diagnosis ~ ., method="gbm",data=training)
ldaFit <- train(diagnosis ~ ., method="lda",data=training)
set.seed(62433)
bosFit <- train(diagnosis ~ ., method="rf",data=training)
boostFit <- train(diagnosis ~ ., method="gbm",data=training)
ldaFit <- train(diagnosis ~ ., method="lda",data=training)
install.packages("shiny")
install.packages("rCharts")
install.packages("devtools")
library(devtools)
library(shinyapp)
library(shinyApp)
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
install.packages("RCurl")
install.packages("RCurl")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='srkaccount', token='3819072722F53A197F51CDD410C5FB98', secret='0jFTZDbJMfypxH4HKSpjY5AGPXjb9fIxQ83fArGF')
install.packages("Rtools")
library(shinyapps)
install_github("ropensci/plotly")
library(devtools)
install_github("ropensci/plotly")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("stringi")
install_github("ropensci/plotly")
library(devtools)
install_github("ropensci/plotly")
library(plotly)
install.packages("googleVis")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
?manipulate
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
?dTable
library(rCharts)
install.packages("rCharts")
install_github("rCharts")
install_github('ramnathv/rCharts')
library(rCharts)
?dtable
?dTable
??dTable
?rCharts::dTable
?rCharts:dTable
library(devtools)
library(slidify)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
setwd("R")
setwd("DevelopingDataProducts/project")
library(knitr)
library(markdown)
library(devtools)
library(slidify)
author("HelloSlides")
